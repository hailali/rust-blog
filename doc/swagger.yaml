swagger: '2.0'
info:
  description: This project contains simple APIs to build a blog with simple feature like Post/Tags/User
  title: Simple Rust Blog
  version: 1.0.0
paths:
  /posts:
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            items:
              $ref: '#/definitions/Post'
            type: array
      security:
        - api_key: []
      tags:
        - post
      description: Returns an array of posts
      operationId: getPosts
      summary: Find all posts
    post:
      consumes: []
      parameters:
        - description: Post content
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PostCreateUpdate'
      responses:
        '201':
          description: Post created successfully
      tags:
        - post
      operationId: createPost
      summary: Updates a post
  '/posts/{postId}':
    parameters:
      - description: ID of post to update
        format: int64
        in: path
        name: postId
        required: true
        type: integer
        enum:
          - 1
    delete:
      parameters: []
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Post not found
      tags:
        - post
      operationId: deletePost
      summary: Delete a post
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Post'
        '400':
          description: Invalid ID supplied
        '404':
          description: Post not found
      security:
        - api_key: []
      tags:
        - post
      description: Returns a single post
      operationId: getPostById
      summary: Find post by ID
    post:
      consumes:
        - application/json
      parameters:
        - description: Post object that needs to be added to the store
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PostCreateUpdate'
      responses:
        '405':
          description: Invalid input
      tags:
        - post
      operationId: addPost
      summary: Add a new post
    put:
      consumes:
        - application/json
      parameters:
        - description: Post object that needs to be added to the store
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/PostCreateUpdate'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Post not found
        '405':
          description: Validation exception
      tags:
        - post
      operationId: updatePost
      summary: Update an existing post
  /tags:
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            items:
              $ref: '#/definitions/Tag'
            type: array
      tags:
        - tag
      operationId: getTags
      summary: Get a list of tags
    post:
      consumes:
        - application/json
      parameters:
        - description: Json to add a new tag
          in: body
          name: body
          schema:
            $ref: '#/definitions/Tag'
      responses:
        '201':
          description: Tag added successfully
        '400':
          description: Invalid tag supplied
      tags:
        - tag
      operationId: addTag
      summary: Add a new tag
  /user:
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            items:
              $ref: '#/definitions/User'
            type: array
      security:
        - api_key: []
      tags:
        - user
      description: Returns an array of users
      operationId: getUsers
      summary: Find all users
    post:
      consumes: []
      parameters:
        - description: Created user object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: User created successfully
      tags:
        - user
      description: This can be done by an unknown user (registration).
      operationId: createUser
      summary: Create user
  /user/login:
    post:
      consumes: []
      produces:
        - application/json
      parameters:
        - description: User loggin
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UserLogin'
      responses:
        '200':
          description: successful operation
          schema:
            properties:
              token:
                type: string
            type: object
        '400':
          description: Invalid username/password supplied
      tags:
        - user
      operationId: loginUser
      summary: Logs user into the system
  /user/me:
    get:
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '403':
          description: User not authenticated
      tags:
        - user
      operationId: getLoggedUser
      summary: Get logged user
    put:
      consumes:
        - application/json
      parameters:
        - description: Updated user object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UserUpdate'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      tags:
        - user
      description: This can only be done by the logged in user.
      operationId: updateLoggedUser
      summary: Updated logged user
  '/user/{id}':
    parameters:
      - description: The name that needs to be deleted
        in: path
        name: id
        required: true
        type: integer
        enum:
          - 1
    delete:
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
      tags:
        - user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      summary: Delete user
    get:
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
      tags:
        - user
      operationId: getUserById
      summary: Get user by user id
    put:
      consumes: []
      parameters:
        - description: Updated user object
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UserUpdate'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      tags:
        - user
      description: This can only be done by the logged in user.
      operationId: updateUser
      summary: Updated user
      x-codegen-request-body-name: body
definitions:
  Post:
    properties:
      active:
        type: boolean
      body:
        type: string
      created_at:
        format: date-time
        type: string
      id:
        format: int64
        type: integer
      sub_title:
        type: string
      title:
        type: string
    required:
      - id
      - title
      - sub_title
      - body
      - active
      - created_at
  PostCreateUpdate:
    properties:
      active:
        type: boolean
      body:
        type: string
      sub_title:
        type: string
      title:
        type: string
    required:
      - title
      - sub_title
      - body
      - active
  Tag:
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    type: object
  User:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        format: int64
        type: integer
      last_name:
        type: string
      username:
        type: string
    required:
      - id
      - first_name
      - last_name
      - email
    type: object
  UserLogin:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  UserUpdate:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
securityDefinitions:
  api_key:
    in: header
    name: api_key
    type: apiKey
tags:
  - description: Everything about the users
    name: user
  - description: User posts
    name: post
  - description: Post tags
    name: tag
x-components: {}
