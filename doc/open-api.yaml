openapi: 3.0.1
info:
  title: Simple Rust Blog
  description: This project contains simple APIs to build a blog with simple feature like Post/Tags/User
  version: 1.0.0
tags:
- name: user
  description: Everything about the users
- name: post
  description: User posts
- name: tag
  description: Post tags
paths:
  /posts/{postId}:
    parameters:
      - name: postId
        in: path
        description: ID of post to update
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags:
      - post
      summary: Find post by ID
      description: Returns a single post
      operationId: getPostById
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Post not found
          content: {}
      security:
      - api_key: []
    put:
      tags:
      - post
      summary: Update an existing post
      operationId: updatePost
      requestBody:
        description: Post object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreateUpdate'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Post not found
          content: {}
        405:
          description: Validation exception
          content: {}
    post:
      tags:
      - post
      summary: Add a new post to the store
      operationId: addPost
      requestBody:
        description: Post object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreateUpdate'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
    delete:
      tags:
      - post
      summary: Deletes a post
      operationId: deletePost
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Post not found
          content: {}
  /post:
    post:
      tags:
      - post
      summary: Updates a post in the store with form data
      operationId: createPost
      requestBody:
        description: Post content
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PostCreateUpdate'
        required: true
      responses:
        201:
          description: Post created successfully
          content: {}
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can be done by an unknown user (registration).
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        201:
          description: User created successfully
          content: {}
  /user/login:
    post:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        description: User loggin
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/{id}:
    get:
      tags:
      - user
      summary: Get user by user id
      operationId: getUserById
      parameters:
      - name: id
        in: path
        description: 'The id that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid id supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: id
        in: path
        description: id that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: integer
      responses:
        400:
          description: Invalid id supplied
          content: {}
        404:
          description: User not found
          content: {}
  /user/me:
    get:
      tags:
      - user
      summary: Get logged user
      operationId: getLoggedUser
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        403:
          description: User not authenticated
          content: {}
    put:
      tags:
      - user
      summary: Updated logged user
      description: This can only be done by the logged in user.
      operationId: updateLoggedUser
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
components:
  schemas:
    Post:
      required:
        - id
        - title
        - sub_title
        - body
        - active
        - creatred_at
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        sub_title:
          type: string
        body:
          type: string
        active:
          type: boolean
        created_at:
          type: string
          format: datetime
    PostCreateUpdate:
      required:
        - title
        - sub_title
        - body
        - active
      properties:
        title:
          type: string
        sub_title:
          type: string
        body:
          type: string
        active:
          type: boolean
    User:
      required:
      - id
      - first_name
      - last_name
      - email
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
    UserLogin:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    UserUpdate:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
